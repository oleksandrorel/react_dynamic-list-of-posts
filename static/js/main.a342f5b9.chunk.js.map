{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/comments.js","api/postDetails.js","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","index.js"],"names":["PostsList","posts","postId","setPostId","className","map","post","key","id","userId","title","type","onClick","NewCommentForm","addComment","useState","name","body","email","comment","setComment","isFormValid","setIsFormValid","handleChange","target","prev","value","resetCommentForm","onSubmit","e","preventDefault","Object","values","some","item","trim","placeholder","onChange","BASE_URL","request","url","options","fetch","then","result","json","getPostComments","data","filter","removePostComments","commentId","method","addNewComment","headers","JSON","stringify","getPostDetails","Loader","PostDetails","postDetail","setPostDetail","postComments","setPostComments","showComments","setShowComments","loadingPost","setLoadingPost","loadingComment","setLoadingComment","loadPostDetails","useCallback","a","loadedPostDetails","loadPostComments","loadedPostComments","useEffect","removeComment","length","getAllPosts","getUserPosts","App","setPosts","selectedUserId","setSelectedUserId","selectedPostId","setSelectedPostId","loading","setLoading","loadUserPosts","loadAllPosts","loadedPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a342f5b9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, postId, setPostId }) => {\n  const clickHandler = (id) => {\n    if (postId === id) {\n      setPostId(0);\n\n      return;\n    }\n\n    setPostId(id);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {\n          posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>\n                  {`[User #${post.userId}]: `}\n                </b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  clickHandler(post.id);\n                }}\n              >\n                {postId === post.id\n                  ? 'Close'\n                  : 'Open'\n                }\n              </button>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    PostId: PropTypes.number,\n    title: PropTypes.string,\n    userId: PropTypes.number,\n  })).isRequired,\n  postId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const [comment, setComment] = useState({\n    name: '',\n    body: '',\n    email: '',\n  });\n  const [isFormValid, setIsFormValid] = useState(true);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (Object.values(comment).some(item => !item.trim())) {\n      setIsFormValid(false);\n\n      return;\n    }\n\n    addComment(comment.name, comment.email, comment.body);\n    resetCommentForm();\n    setIsFormValid(true);\n  };\n\n  const handleChange = ({ target }) => {\n    setComment(prev => ({\n      ...prev,\n      [target.name]: target.value,\n    }));\n  };\n\n  const resetCommentForm = () => {\n    setComment({\n      name: '',\n      body: '',\n      email: '',\n    });\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={comment.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={comment.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment.body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      {!isFormValid && (\n        <p className=\"NewCommentForm__error\">\n          Form should not have empty fields.\n        </p>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(url, options)\n  .then(result => result.json());\n","import { BASE_URL, request } from './api';\n\nexport const getPostComments = postId => request(\n  `${BASE_URL}/comments`,\n)\n  .then(result => result.data.filter(comment => comment.postId === postId));\n\nexport const removePostComments = commentId => request(\n  `${BASE_URL}/comments/${commentId}`, { method: 'Delete' },\n);\n\nexport const addNewComment = (postId, name, email, body) => request(\n  `${BASE_URL}/comments`,\n  {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  },\n);\n","import { BASE_URL, request } from './api';\n\nexport const getPostDetails = postId => request(`${BASE_URL}/posts/${postId}`)\n  .then(result => result.data);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport {\n  addNewComment,\n  getPostComments,\n  removePostComments,\n} from '../../api/comments';\nimport { getPostDetails } from '../../api/postDetails';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [postDetail, setPostDetail] = useState({});\n  const [postComments, setPostComments] = useState([]);\n  const [showComments, setShowComments] = useState(true);\n  const [loadingPost, setLoadingPost] = useState(false);\n  const [loadingComment, setLoadingComment] = useState(false);\n\n  const loadPostDetails = useCallback(async() => {\n    setLoadingPost(true);\n    const loadedPostDetails = await getPostDetails(postId);\n\n    setPostDetail(loadedPostDetails);\n    setLoadingPost(false);\n  }, [postId]);\n\n  const loadPostComments = useCallback(async() => {\n    setLoadingComment(true);\n    const loadedPostComments = await getPostComments(postId);\n\n    setPostComments(loadedPostComments);\n    setLoadingComment(false);\n  }, [postId]);\n\n  useEffect(() => {\n    loadPostDetails();\n    loadPostComments();\n  }, [loadPostDetails, loadPostComments]);\n\n  const hideComments = () => {\n    setShowComments(prev => (!prev));\n  };\n\n  const removeComment = async(commentId) => {\n    await removePostComments(commentId);\n    loadPostComments();\n  };\n\n  const addComment = async(name, email, body) => {\n    setLoadingComment(true);\n    await addNewComment(postId, name, email, body);\n    const loadedPostComments = await getPostComments(postId);\n\n    setLoadingComment(false);\n    setPostComments(loadedPostComments);\n  };\n\n  return (\n    !!postId && postDetail && (\n      <div className=\"PostDetails\">\n        {loadingPost\n          ? <Loader />\n          : (\n            <>\n              <h2>Post details:</h2>\n              <section className=\"PostDetails__post\">\n                <p>{postDetail.title}</p>\n              </section>\n\n              <section className=\"PostDetails__comments\">\n                {!!postComments.length && (\n                <button type=\"button\" className=\"button\" onClick={hideComments}>\n                  {showComments\n                    ? `Hide ${postComments.length} comments`\n                    : `Show ${postComments.length} comments`\n                  }\n                </button>\n                )}\n                {loadingComment\n                  ? <Loader />\n                  : (\n                    showComments && (\n                      <div>\n                        <ul className=\"PostDetails__list\">\n                          {postComments.map(comment => (\n                            <li\n                              key={comment.id}\n                              className=\"PostDetails__list-item\"\n                            >\n                              <button\n                                type=\"button\"\n                                className=\"PostDetails__remove-button button\"\n                                onClick={() => {\n                                  removeComment(comment.id);\n                                }}\n                              >\n                                X\n                              </button>\n                              <p>{comment.body}</p>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    ))}\n\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm addComment={addComment} />\n                </div>\n              </section>\n            </>\n          )}\n\n      </div>\n    )\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL, request } from './api';\n\nexport const getAllPosts = () => request(`${BASE_URL}/posts`)\n  .then(result => result.data);\n\nexport const getUserPosts = userId => getAllPosts()\n  .then(result => result.filter(post => post.userId === userId));\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { Loader } from './components/Loader';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!selectedUserId) {\n      loadAllPosts();\n\n      return;\n    }\n\n    loadUserPosts(selectedUserId);\n  }, [selectedUserId]);\n\n  const loadAllPosts = async() => {\n    setLoading(true);\n    const loadedPosts = await getAllPosts();\n\n    setPosts(loadedPosts);\n    setLoading(false);\n  };\n\n  const loadUserPosts = async(userId) => {\n    setLoading(true);\n    const loadedPosts = await getUserPosts(userId);\n\n    setLoading(false);\n    setPosts(loadedPosts);\n  };\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n\n    setSelectedUserId(+value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {loading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                setPostId={setSelectedPostId}\n                postId={selectedPostId}\n              />\n            )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails postId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}